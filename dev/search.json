[{"path":[]},{"path":"http://r-lib.github.io/prettyunits/dev/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 prettyunits authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gabor Csardi. Author, maintainer. Bill Denney. Contributor. Christophe Regouby. Contributor. Posit Software, PBC. Copyright holder, funder.","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Csardi G (2025). prettyunits: Pretty, Human Readable Formatting Quantities. R package version 1.2.0.9000, https://github.com/r-lib/prettyunits.","code":"@Manual{,   title = {prettyunits: Pretty, Human Readable Formatting of Quantities},   author = {Gabor Csardi},   year = {2025},   note = {R package version 1.2.0.9000},   url = {https://github.com/r-lib/prettyunits}, }"},{"path":"http://r-lib.github.io/prettyunits/dev/index.html","id":"prettyunits","dir":"","previous_headings":"","what":"Pretty, Human Readable Formatting of Quantities","title":"Pretty, Human Readable Formatting of Quantities","text":"prettyunits package formats quantities human readable form. * Time intervals: ‘1337000’ -> ‘15d 11h 23m 20s’. * Vague time intervals: ‘2674000’ -> ‘month ago’. * Bytes: ‘1337’ -> ‘1.34 kB’. * Rounding: ‘99’ 3 significant digits -> ‘99.0’ * p-values: ‘0.00001’ -> ‘<0.0001’. * Colors: ‘#FF0000’ -> ‘red’. * Quantities: ‘1239437’ -> ‘1.24 M’.","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Pretty, Human Readable Formatting of Quantities","text":"can install package CRAN: need development version, install GitHub:","code":"install.packages(\"prettyunits\") pak::pak(\"r-lib/prettyunits\")"},{"path":"http://r-lib.github.io/prettyunits/dev/index.html","id":"bytes","dir":"","previous_headings":"","what":"Bytes","title":"Pretty, Human Readable Formatting of Quantities","text":"pretty_bytes formats number bytes human readable way: simple function emulates Unix ls command, nicely formatted file sizes:","code":"pretty_bytes(1337) ##> [1] \"1.34 kB\" pretty_bytes(133337) ##> [1] \"133.34 kB\" pretty_bytes(13333337) ##> [1] \"13.33 MB\" pretty_bytes(1333333337) ##> [1] \"1.33 GB\" pretty_bytes(133333333337) ##> [1] \"133.33 GB\" uls <- function(path = \".\") {   files <- dir(path)   info <- files %>%     lapply(file.info) %>%     do.call(what = rbind)   info$size <- pretty_bytes(info$size)   df <- data.frame(d = ifelse(info$isdir, \"d\", \" \"),     mode = as.character(info$mode), user = info$uname, group = info$grname,     size = ifelse(info$isdir, \"\", info$size), modified = info$mtime, name = files)   print(df, row.names = FALSE) } uls() ##>  d mode        user group    size            modified        name ##>     644 gaborcsardi staff   232 B 2023-09-24 10:37:41 codecov.yml ##>  d  755 gaborcsardi staff         2023-09-24 10:37:41    data-raw ##>     644 gaborcsardi staff 1.06 kB 2023-09-24 10:40:32 DESCRIPTION ##>     644 gaborcsardi staff    42 B 2022-06-17 13:59:46     LICENSE ##>     644 gaborcsardi staff   111 B 2023-09-23 16:44:21    Makefile ##>  d  755 gaborcsardi staff         2023-09-24 10:37:59         man ##>     644 gaborcsardi staff   523 B 2023-09-24 10:39:58   NAMESPACE ##>     644 gaborcsardi staff 1.46 kB 2023-09-24 10:42:01     NEWS.md ##>  d  755 gaborcsardi staff         2023-09-24 11:25:00           R ##>     644 gaborcsardi staff 7.90 kB 2023-09-24 11:27:42   README.md ##>     644 gaborcsardi staff 4.31 kB 2023-09-24 11:28:23  README.Rmd ##>  d  755 gaborcsardi staff         2022-06-17 13:59:46       tests"},{"path":"http://r-lib.github.io/prettyunits/dev/index.html","id":"quantities","dir":"","previous_headings":"","what":"Quantities","title":"Pretty, Human Readable Formatting of Quantities","text":"pretty_num formats number related linear quantities human readable way: aware result wrong case surface volumes, non-linear quantity. simple example prettify entire tibble","code":"pretty_num(1337) ##> [1] \"1.34 k\" pretty_num(-133337) ##> [1] \"-133.34 k\" pretty_num(1333.37e-9) ##> [1] \"1.33 u\" library(tidyverse) ##> ── Attaching core tidyverse packages ─────────────────────────────────────────────────────────────────────────── tidyverse 2.0.0 ── ##> ✔ dplyr     1.1.2     ✔ readr     2.1.4 ##> ✔ forcats   1.0.0     ✔ stringr   1.5.0 ##> ✔ ggplot2   3.4.2     ✔ tibble    3.2.1 ##> ✔ lubridate 1.9.2     ✔ tidyr     1.3.0 ##> ✔ purrr     1.0.1 ##> ── Conflicts ───────────────────────────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ── ##> ✖ tidyr::extract()   masks magrittr::extract() ##> ✖ dplyr::filter()    masks stats::filter() ##> ✖ dplyr::lag()       masks stats::lag() ##> ✖ purrr::set_names() masks magrittr::set_names() ##> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors tdf <- tribble( ~name, ~`size in m`, ~`speed in m/s`,                 \"land snail\", 0.075, 0.001,                 \"photon\", NA,  299792458,                 \"African plate\", 10546330, 0.000000000681) tdf %>% mutate(across(where(is.numeric), pretty_num)) ##> # A tibble: 3 × 3 ##>   name          `size in m` `speed in m/s` ##>   <chr>         <chr>       <chr> ##> 1 land snail    \"   75 m\"   \"     1 m\" ##> 2 photon        \"    NA \"   \"299.79 M\" ##> 3 African plate \"10.55 M\"   \"   681 p\""},{"path":"http://r-lib.github.io/prettyunits/dev/index.html","id":"time-intervals","dir":"","previous_headings":"","what":"Time intervals","title":"Pretty, Human Readable Formatting of Quantities","text":"pretty_ms formats time interval given milliseconds. pretty_sec seconds, pretty_dt difftime objects. optional compact argument turns compact, approximate format.","code":"pretty_ms(c(1337, 13370, 133700, 1337000, 1337000000)) ##> [1] \"1.3s\"            \"13.4s\"           \"2m 13.7s\"        \"22m 17s\" ##> [5] \"15d 11h 23m 20s\" pretty_ms(c(1337, 13370, 133700, 1337000, 1337000000),   compact = TRUE) ##> [1] \"~1.3s\"  \"~13.4s\" \"~2m\"    \"~22m\"   \"~15d\" pretty_sec(c(1337, 13370, 133700, 1337000, 13370000)) ##> [1] \"22m 17s\"          \"3h 42m 50s\"       \"1d 13h 8m 20s\"    \"15d 11h 23m 20s\" ##> [5] \"154d 17h 53m 20s\" pretty_sec(c(1337, 13370, 133700, 1337000, 13370000),   compact = TRUE) ##> [1] \"~22m\"  \"~3h\"   \"~1d\"   \"~15d\"  \"~154d\""},{"path":"http://r-lib.github.io/prettyunits/dev/index.html","id":"vague-time-intervals","dir":"","previous_headings":"","what":"Vague time intervals","title":"Pretty, Human Readable Formatting of Quantities","text":"vague_dt time_ago formats time intervals using vague format, omitting smaller units. three formats: default, short terse. vague_dt takes difftime object, time_ago works relatively specified date.","code":"vague_dt(format = \"short\", as.difftime(30, units = \"secs\")) ##> [1] \"<1 min\" vague_dt(format = \"short\", as.difftime(14, units = \"mins\")) ##> [1] \"14 min\" vague_dt(format = \"short\", as.difftime(5, units = \"hours\")) ##> [1] \"5 hours\" vague_dt(format = \"short\", as.difftime(25, units = \"hours\")) ##> [1] \"1 day\" vague_dt(format = \"short\", as.difftime(5, units = \"days\")) ##> [1] \"5 day\" now <- Sys.time() time_ago(now) ##> [1] \"moments ago\" time_ago(now - as.difftime(30, units = \"secs\")) ##> [1] \"less than a minute ago\" time_ago(now - as.difftime(14, units = \"mins\")) ##> [1] \"14 minutes ago\" time_ago(now - as.difftime(5, units = \"hours\")) ##> [1] \"5 hours ago\" time_ago(now - as.difftime(25, units = \"hours\")) ##> [1] \"a day ago\""},{"path":"http://r-lib.github.io/prettyunits/dev/index.html","id":"rounding","dir":"","previous_headings":"","what":"Rounding","title":"Pretty, Human Readable Formatting of Quantities","text":"pretty_round() pretty_signif() preserve trailing zeros.","code":"pretty_round(1, digits=6) ##> [1] \"1.000000\" pretty_signif(c(99, 0.9999), digits=3) ##> [1] \"99.0\" \"1.00\""},{"path":"http://r-lib.github.io/prettyunits/dev/index.html","id":"p-values","dir":"","previous_headings":"","what":"p-values","title":"Pretty, Human Readable Formatting of Quantities","text":"pretty_p_value() rounds small p-values indicate less significance level small values.","code":"pretty_p_value(c(0.05, 0.0000001, NA)) ##> [1] \"0.0500\"  \"<0.0001\" NA"},{"path":"http://r-lib.github.io/prettyunits/dev/index.html","id":"colors","dir":"","previous_headings":"","what":"Colors","title":"Pretty, Human Readable Formatting of Quantities","text":"pretty_color converts colors representations human-readable names.","code":"pretty_color(\"black\") ##> [1] \"black\" ##> attr(,\"alt\") ##> [1] \"black\" \"gray0\" \"grey0\" \"Black\" pretty_color(\"#123456\") ##> [1] \"Prussian Blue\" ##> attr(,\"alt\") ##> [1] \"Prussian Blue\""},{"path":"http://r-lib.github.io/prettyunits/dev/reference/color_reference.html","id":null,"dir":"Reference","previous_headings":"","what":"Color names, hexadecimal, and CIE Lab colorspace representations — color_reference","title":"Color names, hexadecimal, and CIE Lab colorspace representations — color_reference","text":"hex hexadecimal color representation (without # beginning) L,,b CIE Lab colorspace representation hex name Preferred human-readable name color name_alt available human-readable names color roygbiv,basic,html,R,pantone,x11,ntc Source dataset containing color","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/reference/color_reference.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Color names, hexadecimal, and CIE Lab colorspace representations — color_reference","text":"https://github.com/colorjs/color-namer R colors()","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/reference/pretty_bytes.html","id":null,"dir":"Reference","previous_headings":"","what":"Bytes in a human readable string — pretty_bytes","title":"Bytes in a human readable string — pretty_bytes","text":"Use pretty_bytes() format bytes. compute_bytes() underlying engine may useful custom formatting.","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/reference/pretty_bytes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bytes in a human readable string — pretty_bytes","text":"","code":"pretty_bytes(bytes, style = c(\"default\", \"nopad\", \"6\"))  compute_bytes(bytes, smallest_unit = \"B\")"},{"path":"http://r-lib.github.io/prettyunits/dev/reference/pretty_bytes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bytes in a human readable string — pretty_bytes","text":"bytes Numeric vector, number bytes. style Formatting style: \"default\" original pretty_bytes formatting, always pads output, vector elements width, \"nopad\" similar, pad output, \"6\" always uses 6 characters, \"6\" style useful important output always width (number characters), e.g. progress bars. See examples . smallest_unit character scalar, smallest unit use.","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/reference/pretty_bytes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bytes in a human readable string — pretty_bytes","text":"Character vector, formatted sizes. compute_bytes, data frame columns amount, unit, negative.","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/reference/pretty_bytes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bytes in a human readable string — pretty_bytes","text":"","code":"bytes <- c(1337, 133337, 13333337, 1333333337, 133333333337) pretty_bytes(bytes) #> [1] \"  1.34 kB\" \"133.34 kB\" \" 13.33 MB\" \"  1.33 GB\" \"133.33 GB\" pretty_bytes(bytes, style = \"nopad\") #> [1] \"1.34 kB\"   \"133.34 kB\" \"13.33 MB\"  \"1.33 GB\"   \"133.33 GB\" pretty_bytes(bytes, style = \"6\") #> [1] \"1.3 kB\" \"133 kB\" \" 13 MB\" \"1.3 GB\" \"133 GB\""},{"path":"http://r-lib.github.io/prettyunits/dev/reference/pretty_color.html","id":null,"dir":"Reference","previous_headings":"","what":"Color definition (like RGB) to a name — pretty_color","title":"Color definition (like RGB) to a name — pretty_color","text":"Color definition (like RGB) name","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/reference/pretty_color.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Color definition (like RGB) to a name — pretty_color","text":"","code":"pretty_color(color)  pretty_colour(color)"},{"path":"http://r-lib.github.io/prettyunits/dev/reference/pretty_color.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Color definition (like RGB) to a name — pretty_color","text":"color scalar color usable input col2rgb() (assumed sRGB color space).","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/reference/pretty_color.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Color definition (like RGB) to a name — pretty_color","text":"character string closest named colors input color.  output attribute alternate color names (named \"alt\").","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/reference/pretty_dt.html","id":null,"dir":"Reference","previous_headings":"","what":"Pretty formatting of time intervals (difftime objects) — pretty_dt","title":"Pretty formatting of time intervals (difftime objects) — pretty_dt","text":"Pretty formatting time intervals (difftime objects)","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/reference/pretty_dt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pretty formatting of time intervals (difftime objects) — pretty_dt","text":"","code":"pretty_dt(dt, compact = FALSE)"},{"path":"http://r-lib.github.io/prettyunits/dev/reference/pretty_dt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pretty formatting of time intervals (difftime objects) — pretty_dt","text":"dt difftime object, vector time differences. compact true, first non-zero unit used. See examples .","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/reference/pretty_dt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pretty formatting of time intervals (difftime objects) — pretty_dt","text":"Character vector formatted time intervals.","code":""},{"path":[]},{"path":"http://r-lib.github.io/prettyunits/dev/reference/pretty_dt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pretty formatting of time intervals (difftime objects) — pretty_dt","text":"","code":"pretty_dt(as.difftime(1000, units = \"secs\")) #> [1] \"16m 40s\" pretty_dt(as.difftime(0, units = \"secs\")) #> [1] \"0ms\""},{"path":"http://r-lib.github.io/prettyunits/dev/reference/pretty_ms.html","id":null,"dir":"Reference","previous_headings":"","what":"Pretty formatting of milliseconds — pretty_ms","title":"Pretty formatting of milliseconds — pretty_ms","text":"Pretty formatting milliseconds","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/reference/pretty_ms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pretty formatting of milliseconds — pretty_ms","text":"","code":"pretty_ms(ms, compact = FALSE)"},{"path":"http://r-lib.github.io/prettyunits/dev/reference/pretty_ms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pretty formatting of milliseconds — pretty_ms","text":"ms Numeric vector milliseconds compact true, first non-zero unit used. See examples .","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/reference/pretty_ms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pretty formatting of milliseconds — pretty_ms","text":"Character vector formatted time intervals.","code":""},{"path":[]},{"path":"http://r-lib.github.io/prettyunits/dev/reference/pretty_ms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pretty formatting of milliseconds — pretty_ms","text":"","code":"pretty_ms(c(1337, 13370, 133700, 1337000, 1337000000)) #> [1] \"1.3s\"            \"13.4s\"           \"2m 13.7s\"        \"22m 17s\"         #> [5] \"15d 11h 23m 20s\"  pretty_ms(c(1337, 13370, 133700, 1337000, 1337000000),           compact = TRUE) #> [1] \"~1.3s\"  \"~13.4s\" \"~2m\"    \"~22m\"   \"~15d\""},{"path":"http://r-lib.github.io/prettyunits/dev/reference/pretty_num.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear quantities in a human readable string — pretty_num","title":"Linear quantities in a human readable string — pretty_num","text":"Use pretty_num() format numbers compute_num() underlying engine may useful custom formatting.","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/reference/pretty_num.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear quantities in a human readable string — pretty_num","text":"","code":"pretty_num(number, style = c(\"default\", \"nopad\", \"6\"))  compute_num(number, smallest_prefix = \"q\")"},{"path":"http://r-lib.github.io/prettyunits/dev/reference/pretty_num.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear quantities in a human readable string — pretty_num","text":"number Numeric vector, number related linear quantity. style Formatting style: \"default\" original pretty_num formatting, always pads output, vector elements width, \"nopad\" similar, pad output, \"6\" always uses 6 characters, \"6\" style useful important output always width (number characters), e.g. progress bars. See examples . smallest_prefix character scalar, smallest prefix use.","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/reference/pretty_num.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linear quantities in a human readable string — pretty_num","text":"Character vector, formatted sizes. compute_num, data frame columns amount, prefix, negative.","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/reference/pretty_num.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Linear quantities in a human readable string — pretty_num","text":"","code":"numbers <- c(1337, 1.3333e-5, 13333337, 1333333337, 133333333337) pretty_num(numbers) #> [1] \"  1.34 k\" \" 13.33 u\" \" 13.33 M\" \"  1.33 G\" \"133.33 G\" pretty_num(numbers, style = \"nopad\") #> [1] \"1.34 k\"   \"13.33 u\"  \"13.33 M\"  \"1.33 G\"   \"133.33 G\" pretty_num(numbers, style = \"6\") #> [1] \"1.34 k\" \"13.3 u\" \"13.3 M\" \"1.33 G\" \" 133 G\""},{"path":"http://r-lib.github.io/prettyunits/dev/reference/pretty_p_value.html","id":null,"dir":"Reference","previous_headings":"","what":"p-values in a human-readable string — pretty_p_value","title":"p-values in a human-readable string — pretty_p_value","text":"p-values human-readable string","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/reference/pretty_p_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"p-values in a human-readable string — pretty_p_value","text":"","code":"pretty_p_value(x, minval = 1e-04)"},{"path":"http://r-lib.github.io/prettyunits/dev/reference/pretty_p_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"p-values in a human-readable string — pretty_p_value","text":"x numeric vector. minval minimum p-value show (lower values show paste0(\"<\", minval)).","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/reference/pretty_p_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"p-values in a human-readable string — pretty_p_value","text":"character vector p-value representations.","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/reference/pretty_p_value.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"p-values in a human-readable string — pretty_p_value","text":"","code":"pretty_p_value(c(1, 0, NA, 0.01, 0.0000001)) #> [1] \"1.0000\"  \"<0.0001\" NA        \"0.0100\"  \"<0.0001\" pretty_p_value(c(1, 0, NA, 0.01, 0.0000001), minval = 0.05) #> [1] \"1.00\"  \"<0.05\" NA      \"<0.05\" \"<0.05\""},{"path":"http://r-lib.github.io/prettyunits/dev/reference/pretty_round.html","id":null,"dir":"Reference","previous_headings":"","what":"Round a value to a defined number of digits printing out trailing zeros, if applicable — pretty_round","title":"Round a value to a defined number of digits printing out trailing zeros, if applicable — pretty_round","text":"Round value defined number digits printing trailing zeros, applicable","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/reference/pretty_round.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Round a value to a defined number of digits printing out trailing zeros, if applicable — pretty_round","text":"","code":"pretty_round(x, digits = 0, sci_range = Inf, sci_sep = \"e\")"},{"path":"http://r-lib.github.io/prettyunits/dev/reference/pretty_round.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Round a value to a defined number of digits printing out trailing zeros, if applicable — pretty_round","text":"x number round. digits integer indicating number decimal places. sci_range See help pretty_signif() (likely want round pretty_signif() want use argument). sci_sep separator use scientific notation strings (typically either \"e\" \"x10^\" computer- human-readable output).","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/reference/pretty_round.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Round a value to a defined number of digits printing out trailing zeros, if applicable — pretty_round","text":"string value.","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/reference/pretty_round.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Round a value to a defined number of digits printing out trailing zeros, if applicable — pretty_round","text":"Values standard numbers like Inf, NA, NaN returned \"Inf\", \"NA\", \"NaN\".","code":""},{"path":[]},{"path":"http://r-lib.github.io/prettyunits/dev/reference/pretty_sec.html","id":null,"dir":"Reference","previous_headings":"","what":"Pretty formatting of seconds — pretty_sec","title":"Pretty formatting of seconds — pretty_sec","text":"Pretty formatting seconds","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/reference/pretty_sec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pretty formatting of seconds — pretty_sec","text":"","code":"pretty_sec(sec, compact = FALSE)"},{"path":"http://r-lib.github.io/prettyunits/dev/reference/pretty_sec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pretty formatting of seconds — pretty_sec","text":"sec Numeric vector seconds. compact true, first non-zero unit used. See examples .","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/reference/pretty_sec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pretty formatting of seconds — pretty_sec","text":"Character vector formatted time intervals.","code":""},{"path":[]},{"path":"http://r-lib.github.io/prettyunits/dev/reference/pretty_sec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pretty formatting of seconds — pretty_sec","text":"","code":"pretty_sec(c(1337, 13370, 133700, 1337000, 13370000)) #> [1] \"22m 17s\"          \"3h 42m 50s\"       \"1d 13h 8m 20s\"    \"15d 11h 23m 20s\"  #> [5] \"154d 17h 53m 20s\"  pretty_sec(c(1337, 13370, 133700, 1337000, 13370000),            compact = TRUE) #> [1] \"~22m\"  \"~3h\"   \"~1d\"   \"~15d\"  \"~154d\""},{"path":"http://r-lib.github.io/prettyunits/dev/reference/pretty_signif.html","id":null,"dir":"Reference","previous_headings":"","what":"Round a value to a defined number of significant digits printing out trailing zeros, if applicable — pretty_signif","title":"Round a value to a defined number of significant digits printing out trailing zeros, if applicable — pretty_signif","text":"Round value defined number significant digits printing trailing zeros, applicable","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/reference/pretty_signif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Round a value to a defined number of significant digits printing out trailing zeros, if applicable — pretty_signif","text":"","code":"pretty_signif(x, digits = 6, sci_range = 6, sci_sep = \"e\")"},{"path":"http://r-lib.github.io/prettyunits/dev/reference/pretty_signif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Round a value to a defined number of significant digits printing out trailing zeros, if applicable — pretty_signif","text":"x number round. digits integer indicating number significant digits. sci_range integer (Inf) indicating switch scientific notation instead floating point. Zero indicates always use scientific; Inf indicates never use scientific notation; otherwise, scientific notation used abs(log10(x)) > sci_range. sci_sep separator use scientific notation strings (typically either \"e\" \"x10^\" computer- human-readable output).","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/reference/pretty_signif.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Round a value to a defined number of significant digits printing out trailing zeros, if applicable — pretty_signif","text":"string value.","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/reference/pretty_signif.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Round a value to a defined number of significant digits printing out trailing zeros, if applicable — pretty_signif","text":"Values standard numbers like Inf, NA, NaN returned \"Inf\", \"NA\", NaN.","code":""},{"path":[]},{"path":"http://r-lib.github.io/prettyunits/dev/reference/prettyunits-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Prettier formatting of quantities — prettyunits-package","title":"Prettier formatting of quantities — prettyunits-package","text":"Render quantities pretty, human-readable formatting. Time intervals: '1337000' -> '15d 11h 23m 20s'. Vague time intervals: '2674000' -> 'month ago'. Bytes: '1337' -> '1.34 kB'. p-values: '0.00001' -> '<0.0001'. Colors: '#FF0000' -> 'red'. Quantities: '1239437' -> '1.24 M'.","code":""},{"path":[]},{"path":"http://r-lib.github.io/prettyunits/dev/reference/prettyunits-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Prettier formatting of quantities — prettyunits-package","text":"Maintainer: Gabor Csardi csardi.gabor@gmail.com contributors: Bill Denney wdenney@humanpredictions.com (ORCID) [contributor] Christophe Regouby christophe.regouby@free.fr [contributor] Posit Software, PBC [copyright holder, funder]","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/reference/time_ago.html","id":null,"dir":"Reference","previous_headings":"","what":"Human readable format of the time interval since a time point — time_ago","title":"Human readable format of the time interval since a time point — time_ago","text":"calls vague_dt actual formatting.","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/reference/time_ago.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Human readable format of the time interval since a time point — time_ago","text":"","code":"time_ago(date, format = c(\"default\", \"short\", \"terse\"))"},{"path":"http://r-lib.github.io/prettyunits/dev/reference/time_ago.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Human readable format of the time interval since a time point — time_ago","text":"date Date(s), .POSIXct called . format Format, currently available formats : ‘default’, ‘short’, ‘terse’. See examples .","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/reference/time_ago.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Human readable format of the time interval since a time point — time_ago","text":"Character vector formatted time intervals.","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/reference/time_ago.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Human readable format of the time interval since a time point — time_ago","text":"","code":"now <- Sys.time()  time_ago(now) #> [1] \"moments ago\" time_ago(now - as.difftime(30, units = \"secs\")) #> [1] \"less than a minute ago\" time_ago(now - as.difftime(14, units = \"mins\")) #> [1] \"14 minutes ago\" time_ago(now - as.difftime(5, units = \"hours\")) #> [1] \"5 hours ago\" time_ago(now - as.difftime(25, units = \"hours\")) #> [1] \"a day ago\" time_ago(now - as.difftime(5, units = \"days\")) #> [1] \"5 days ago\" time_ago(now - as.difftime(30, units = \"days\")) #> [1] \"about a month ago\" time_ago(now - as.difftime(365, units = \"days\")) #> [1] \"about a year ago\" time_ago(now - as.difftime(365 * 10, units = \"days\")) #> [1] \"10 years ago\"  ## Short format time_ago(format = \"short\", now) #> [1] \"<1 min\" time_ago(format = \"short\", now - as.difftime(30, units = \"secs\")) #> [1] \"<1 min\" time_ago(format = \"short\", now - as.difftime(14, units = \"mins\")) #> [1] \"14 min\" time_ago(format = \"short\", now - as.difftime(5, units = \"hours\")) #> [1] \"5 hours\" time_ago(format = \"short\", now - as.difftime(25, units = \"hours\")) #> [1] \"1 day\" time_ago(format = \"short\", now - as.difftime(5, units = \"days\")) #> [1] \"5 day\" time_ago(format = \"short\", now - as.difftime(30, units = \"days\")) #> [1] \"1 mon\" time_ago(format = \"short\", now - as.difftime(365, units = \"days\")) #> [1] \"1 year\" time_ago(format = \"short\", now - as.difftime(365 * 10, units = \"days\")) #> [1] \"10 years\"  ## Even shorter, terse format, (almost always) exactly 3 characters wide time_ago(format = \"terse\", now) #> [1] \" 0s\" time_ago(format = \"terse\", now - as.difftime(30, units = \"secs\")) #> [1] \"30s\" time_ago(format = \"terse\", now - as.difftime(14, units = \"mins\")) #> [1] \"14m\" time_ago(format = \"terse\", now - as.difftime(5, units = \"hours\")) #> [1] \" 5h\" time_ago(format = \"terse\", now - as.difftime(25, units = \"hours\")) #> [1] \" 1d\" time_ago(format = \"terse\", now - as.difftime(5, units = \"days\")) #> [1] \" 5d\" time_ago(format = \"terse\", now - as.difftime(30, units = \"days\")) #> [1] \" 1M\" time_ago(format = \"terse\", now - as.difftime(365, units = \"days\")) #> [1] \" 1y\" time_ago(format = \"terse\", now - as.difftime(365 * 10, units = \"days\")) #> [1] \"10y\""},{"path":"http://r-lib.github.io/prettyunits/dev/reference/vague_dt.html","id":null,"dir":"Reference","previous_headings":"","what":"Human readable format of a time interval — vague_dt","title":"Human readable format of a time interval — vague_dt","text":"Human readable format time interval","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/reference/vague_dt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Human readable format of a time interval — vague_dt","text":"","code":"vague_dt(dt, format = c(\"default\", \"short\", \"terse\"))"},{"path":"http://r-lib.github.io/prettyunits/dev/reference/vague_dt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Human readable format of a time interval — vague_dt","text":"dt difftime object, time interval(s). format Format, currently available formats : ‘default’, ‘short’, ‘terse’. See examples .","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/reference/vague_dt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Human readable format of a time interval — vague_dt","text":"Character vector formatted time intervals.","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/reference/vague_dt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Human readable format of a time interval — vague_dt","text":"","code":"vague_dt(as.difftime(30, units = \"secs\")) #> [1] \"less than a minute ago\" vague_dt(as.difftime(14, units = \"mins\")) #> [1] \"14 minutes ago\" vague_dt(as.difftime(5, units = \"hours\")) #> [1] \"5 hours ago\" vague_dt(as.difftime(25, units = \"hours\")) #> [1] \"a day ago\" vague_dt(as.difftime(5, units = \"days\")) #> [1] \"5 days ago\" vague_dt(as.difftime(30, units = \"days\")) #> [1] \"about a month ago\" vague_dt(as.difftime(365, units = \"days\")) #> [1] \"about a year ago\" vague_dt(as.difftime(365 * 10, units = \"days\")) #> [1] \"10 years ago\"  ## Short format vague_dt(format = \"short\", as.difftime(30, units = \"secs\")) #> [1] \"<1 min\" vague_dt(format = \"short\", as.difftime(14, units = \"mins\")) #> [1] \"14 min\" vague_dt(format = \"short\", as.difftime(5, units = \"hours\")) #> [1] \"5 hours\" vague_dt(format = \"short\", as.difftime(25, units = \"hours\")) #> [1] \"1 day\" vague_dt(format = \"short\", as.difftime(5, units = \"days\")) #> [1] \"5 day\" vague_dt(format = \"short\", as.difftime(30, units = \"days\")) #> [1] \"1 mon\" vague_dt(format = \"short\", as.difftime(365, units = \"days\")) #> [1] \"1 year\" vague_dt(format = \"short\", as.difftime(365 * 10, units = \"days\")) #> [1] \"10 years\"  ## Even shorter, terse format, (almost always) exactly 3 characters wide vague_dt(format = \"terse\", as.difftime(30, units = \"secs\")) #> [1] \"30s\" vague_dt(format = \"terse\", as.difftime(14, units = \"mins\")) #> [1] \"14m\" vague_dt(format = \"terse\", as.difftime(5, units = \"hours\")) #> [1] \" 5h\" vague_dt(format = \"terse\", as.difftime(25, units = \"hours\")) #> [1] \" 1d\" vague_dt(format = \"terse\", as.difftime(5, units = \"days\")) #> [1] \" 5d\" vague_dt(format = \"terse\", as.difftime(30, units = \"days\")) #> [1] \" 1M\" vague_dt(format = \"terse\", as.difftime(365, units = \"days\")) #> [1] \" 1y\" vague_dt(format = \"terse\", as.difftime(365 * 10, units = \"days\")) #> [1] \"10y\""},{"path":"http://r-lib.github.io/prettyunits/dev/news/index.html","id":"prettyunits-development-version","dir":"Changelog","previous_headings":"","what":"prettyunits (development version)","title":"prettyunits (development version)","text":"Add \"q\", \"r\", \"R\", \"Q\" prefix BIPM pretty_num() (#41, @cregouby)","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/news/index.html","id":"prettyunits-120","dir":"Changelog","previous_headings":"","what":"prettyunits 1.2.0","title":"prettyunits 1.2.0","text":"CRAN release: 2023-09-24 New pretty_num() function BIPM agreed unit prefix (#26, @cregouby). New pretty_round() pretty_signif() functions preserve requested number digits character strings (#14, @billdenney). New pretty_p_value() function convert p-values character strings small values shown like “<0.0001” (#13, @billdenney). New pretty_color() functionm converts color named color (#12, @billdenney).","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/news/index.html","id":"prettyunits-111","dir":"Changelog","previous_headings":"","what":"prettyunits 1.1.1","title":"prettyunits 1.1.1","text":"CRAN release: 2020-01-24 Fix spurious zero fractions pretty_bytes() formatting vectors sizes (#23).","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/news/index.html","id":"prettyunits-110","dir":"Changelog","previous_headings":"","what":"prettyunits 1.1.0","title":"prettyunits 1.1.0","text":"CRAN release: 2020-01-09 pretty_dt(), pretty_ms() pretty_sec() now handle NA values properly, return NA_character_ (#10, @petermeissner). pretty_bytes() now formats quantities just units better. E.g. 1MB - 1B formatted \"1 MB\" instead \"1000 kB\" (#18). pretty_bytes() now multiple styles. particular, fixed width style useful progress bars. Another style avoids left-padding spaces. new low level compute_bytes() function can used create custom formatters bytes.","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/news/index.html","id":"prettyunits-102","dir":"Changelog","previous_headings":"","what":"prettyunits 1.0.2","title":"prettyunits 1.0.2","text":"CRAN release: 2015-07-13 pretty_bytes() always uses two fraction digits non-integers. looks nicer progress bar, width string change much.","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/news/index.html","id":"prettyunits-101","dir":"Changelog","previous_headings":"","what":"prettyunits 1.0.1","title":"prettyunits 1.0.1","text":"First version NEWS file. Get rid R CMD check notes.","code":""},{"path":"http://r-lib.github.io/prettyunits/dev/news/index.html","id":"prettyunits-100","dir":"Changelog","previous_headings":"","what":"prettyunits 1.0.0","title":"prettyunits 1.0.0","text":"CRAN release: 2014-10-13 Last version without NEWS file.","code":""}]
